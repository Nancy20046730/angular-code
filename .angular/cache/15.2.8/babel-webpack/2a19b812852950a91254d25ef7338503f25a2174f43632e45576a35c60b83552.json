{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { QuizMakerService } from '../services/quiz-maker.service';\nlet QuizMakerComponent = class QuizMakerComponent {\n  //status:boolean=false\n  constructor(quizService) {\n    this.quizService = quizService;\n    this.categories = [];\n    this.difficulties = ['Easy', 'medium', 'hard'];\n    this.quizDetails = [];\n    this.noQuestions = '';\n    this.toggle = false;\n  }\n  ngOnInit() {\n    this.getCategories();\n  }\n  getCategories() {\n    this.quizService.getQuizCategories().subscribe(res => {\n      const obj = JSON.parse(JSON.stringify(res));\n      this.categories = obj.trivia_categories;\n    });\n  }\n  createQuiz(inputParam) {\n    this.quizService.createQuiz(inputParam).subscribe(data => {\n      let obj = JSON.parse(JSON.stringify(data));\n      if (obj.results.length > 0) {\n        this.quizDetails = obj.results;\n        this.noQuestions = '';\n        console.log(this.quizDetails);\n        for (let i = 0; i < this.quizDetails.length; i++) {\n          this.quizDetails[i].answers = this.quizDetails[i].incorrect_answers;\n          this.quizDetails[i].answers.splice((this.quizDetails[i].answers.length + 1) * Math.random() | 0, 0, this.quizDetails[i].correct_answer);\n        }\n        console.log(this.quizDetails);\n      } else {\n        debugger;\n        this.quizDetails = [];\n        this.noQuestions = 'No questions available for provided category and difficulty level';\n      }\n    });\n  }\n  clickEvent() {\n    // this.status=true;\n  }\n  // status:string = 'Enable'; \n  enableDisableRule(event) {\n    debugger;\n    console.log(event);\n    // = !this.toggle;\n    // this.status = this.toggle ? 'Enable' : 'Disable';\n  }\n};\n\nQuizMakerComponent = __decorate([Component({\n  selector: 'app-quiz-maker',\n  templateUrl: './quiz-maker.component.html',\n  styleUrls: ['./quiz-maker.component.css'],\n  providers: [QuizMakerService]\n})], QuizMakerComponent);\nexport { QuizMakerComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAe,eAAe;AAChD,SAASC,gBAAgB,QAAQ,gCAAgC;AAU1D,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAO7B;EACAC,YAAoBC,WAA4B;IAA5B,gBAAW,GAAXA,WAAW;IAN/B,eAAU,GAAY,EAAE;IACxB,iBAAY,GAAU,CAAC,MAAM,EAAC,QAAQ,EAAC,MAAM,CAAC;IAC9C,gBAAW,GAAe,EAAE;IAC5B,gBAAW,GAAQ,EAAE;IA4CvB,WAAM,GAAW,KAAK;EAzC8B;EAElDC,QAAQ;IACN,IAAI,CAACC,aAAa,EAAE;EACtB;EACAA,aAAa;IACX,IAAI,CAACF,WAAW,CAACG,iBAAiB,EAAE,CAACC,SAAS,CAC1CC,GAAG,IAAG;MACJ,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,GAAG,CAAC,CAAC;MACzC,IAAI,CAACK,UAAU,GAAIJ,GAAG,CAACK,iBAAiB;IAC5C,CAAC,CACJ;EACL;EACAC,UAAU,CAACC,UAAe;IAExB,IAAI,CAACb,WAAW,CAACY,UAAU,CAACC,UAAU,CAAC,CAClCT,SAAS,CAACU,IAAI,IAAG;MACjB,IAAIR,GAAG,GAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACK,IAAI,CAAC,CAAC;MACxC,IAAGR,GAAG,CAACS,OAAO,CAACC,MAAM,GAAC,CAAC,EAAC;QACvB,IAAI,CAACC,WAAW,GAACX,GAAG,CAACS,OAAO;QAC5B,IAAI,CAACG,WAAW,GAAC,EAAE;QACnBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAAC;QAC7B,KAAI,IAAII,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACJ,WAAW,CAACD,MAAM,EAACK,CAAC,EAAE,EAAC;UAClD,IAAI,CAACJ,WAAW,CAACI,CAAC,CAAC,CAACC,OAAO,GAAC,IAAI,CAACL,WAAW,CAACI,CAAC,CAAC,CAACE,iBAAiB;UACjE,IAAI,CAACN,WAAW,CAACI,CAAC,CAAC,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAI,CAACP,WAAW,CAACI,CAAC,CAAC,CAACC,OAAO,CAACN,MAAM,GAAC,CAAC,IAAIS,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAACT,WAAW,CAACI,CAAC,CAAC,CAACM,cAAc,CAAC;;QAG7HR,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAAC;OAC7B,MACG;QACH;QACA,IAAI,CAACA,WAAW,GAAC,EAAE;QACnB,IAAI,CAACC,WAAW,GAAC,mEAAmE;;IAGtF,CAAC,CAAC;EAER;EACAU,UAAU;IACT;EAAA;EAGD;EAEAC,iBAAiB,CAACC,KAAY;IAC5B;IACAX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;IACjB;IACA;EACH;CACC;;AA1DYhC,kBAAkB,eAN9BF,SAAS,CAAC;EACTmC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B,CAAC;EACzCC,SAAS,EAAE,CAACrC,gBAAgB;CAC7B,CAAC,GACWC,kBAAkB,CA0D9B;SA1DYA,kBAAkB","names":["Component","QuizMakerService","QuizMakerComponent","constructor","quizService","ngOnInit","getCategories","getQuizCategories","subscribe","res","obj","JSON","parse","stringify","categories","trivia_categories","createQuiz","inputParam","data","results","length","quizDetails","noQuestions","console","log","i","answers","incorrect_answers","splice","Math","random","correct_answer","clickEvent","enableDisableRule","event","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["D:\\Angular-certification-level-2\\quiz-maker\\src\\app\\quiz-maker\\quiz-maker.component.ts"],"sourcesContent":["import { Component ,OnInit} from '@angular/core';\nimport { QuizMakerService } from '../services/quiz-maker.service';\nimport { Category } from '../models/category';\nimport { Quiz } from '../models/quiz';\nimport { QuizDetails } from '../models/quizDetails';\n@Component({\n  selector: 'app-quiz-maker',\n  templateUrl: './quiz-maker.component.html',\n  styleUrls: ['./quiz-maker.component.css'],\n  providers: [QuizMakerService]\n})\nexport class QuizMakerComponent implements OnInit {\n\n  categories:Category[]=[];\n  difficulties:string[]=['Easy','medium','hard'];\n  quizDetails:QuizDetails[]=[];\n  noQuestions:string='';\n \n  //status:boolean=false\n  constructor(private quizService:QuizMakerService){}\n\n  ngOnInit(): void {\n    this.getCategories();\n  }\n  getCategories():void{\n    this.quizService.getQuizCategories().subscribe(\n        res => {\n          const obj = JSON.parse(JSON.stringify(res));\n            this.categories =  obj.trivia_categories;\n        }\n    );\n}\ncreateQuiz(inputParam:Quiz){\n\n  this.quizService.createQuiz(inputParam)\n      .subscribe(data => {\n       let obj=JSON.parse(JSON.stringify(data));\n       if(obj.results.length>0){\n        this.quizDetails=obj.results;\n        this.noQuestions='';\n        console.log(this.quizDetails)\n        for(let i=0;i<this.quizDetails.length;i++){\nthis.quizDetails[i].answers=this.quizDetails[i].incorrect_answers;\nthis.quizDetails[i].answers.splice((this.quizDetails[i].answers.length+1) * Math.random() | 0, 0, this.quizDetails[i].correct_answer)\n\n        }\n        console.log(this.quizDetails)\n       }\n       else{\n        debugger;\n        this.quizDetails=[];\n        this.noQuestions='No questions available for provided category and difficulty level';\n       }\n       \n      })  ;\n\n}\nclickEvent():void{\n // this.status=true;\n}\ntoggle :boolean= false;\n// status:string = 'Enable'; \n\nenableDisableRule(event:string) {\n  debugger;\n  console.log(event)\n   // = !this.toggle;\n   // this.status = this.toggle ? 'Enable' : 'Disable';\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}