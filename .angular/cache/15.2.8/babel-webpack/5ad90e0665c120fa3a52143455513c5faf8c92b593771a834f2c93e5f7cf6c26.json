{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/quiz-maker.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction QuizResultComponent_div_3_div_2_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const answer_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.sanitizeText(answer_r5), \" \");\n  }\n}\nfunction QuizResultComponent_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 5);\n    i0.ɵɵtemplate(4, QuizResultComponent_div_3_div_2_button_4_Template, 2, 1, \"button\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const question_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.sanitizeText(question_r2.question));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", question_r2.answers);\n  }\n}\nfunction QuizResultComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1);\n    i0.ɵɵtemplate(2, QuizResultComponent_div_3_div_2_Template, 5, 2, \"div\", 2);\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\")(6, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function QuizResultComponent_div_3_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.createQuiz());\n    });\n    i0.ɵɵtext(7, \"Create a new Quiz\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.quizDetails);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.resultStatement, \" \");\n  }\n}\nexport class QuizResultComponent {\n  constructor(quizService, router) {\n    this.quizService = quizService;\n    this.router = router;\n    this.resultStatement = '';\n  }\n  ngOnInit() {\n    const quizData = this.quizService.setQuizData();\n    if (quizData) {\n      const {\n        questions,\n        selectedAnswers\n      } = quizData;\n      // Use the questions and selected answers to display in the QuizResultComponent\n      // Compare selected answers with correct answers to determine which ones are correct/incorrect\n    }\n  }\n\n  createQuiz() {\n    this.router.navigate(['/']);\n  }\n  sanitizeText(text) {\n    const parser = new DOMParser();\n    let sanitizedString = '';\n    if (text != undefined && text != null) {\n      let decodedString = parser.parseFromString(text, \"text/html\").documentElement.textContent;\n      if (decodedString != null) sanitizedString = decodedString.replace(/&#?[a-z0-9]+;/gi, \"\");\n    }\n    return sanitizedString;\n  }\n}\nQuizResultComponent.ɵfac = function QuizResultComponent_Factory(t) {\n  return new (t || QuizResultComponent)(i0.ɵɵdirectiveInject(i1.QuizMakerService), i0.ɵɵdirectiveInject(i2.Router));\n};\nQuizResultComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: QuizResultComponent,\n  selectors: [[\"app-quiz-result\"]],\n  decls: 4,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"quiz-container\"], [\"class\", \"quiz-question\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 3, \"click\"], [1, \"quiz-question\"], [1, \"quiz-answer\", \"inner\", \"button\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function QuizResultComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2, \"results\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, QuizResultComponent_div_3_Template, 8, 2, \"div\", 0);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.quizDetails.length > 0);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;IAOYA,8BAIC;IACCA,YACF;IAAAA,iBAAS;;;;;IADPA,eACF;IADEA,+DACF;;;;;IATJA,8BAA4F;IACtFA,YAAoC;IAAAA,iBAAK;IAC7CA,8BAAsC;IACpCA,sFAMS;IACXA,iBAAM;;;;;IATFA,eAAoC;IAApCA,+DAAoC;IAGjBA,eAAqB;IAArBA,6CAAqB;;;;;;IANlDA,2BAAkC;IAE9BA,0EAWM;IACNA,2BAAK;IAAAA,YAAoB;IAAAA,iBAAM;IAC/BA,2BAAK;IAAuBA;MAAAA;MAAA;MAAA,OAASA,kCAAY;IAAA,EAAC;IAAEA,iCAAiB;IAAAA,iBAAS;;;;IAb9BA,eAAgB;IAAhBA,4CAAgB;IAY3DA,eAAoB;IAApBA,sDAAoB;;;ACPjC,OAAM,MAAOC,mBAAmB;EAG9BC,YAAoBC,WAA4B,EAASC,MAAc;IAAnD,gBAAW,GAAXD,WAAW;IAA0B,WAAM,GAANC,MAAM;IAD/D,oBAAe,GAAQ,EAAE;EACgD;EAEzEC,QAAQ;IACN,MAAMC,QAAQ,GAAG,IAAI,CAACH,WAAW,CAACI,WAAW,EAAE;IACjD,IAAID,QAAQ,EAAE;MACZ,MAAM;QAAEE,SAAS;QAAEC;MAAe,CAAE,GAAGH,QAAQ;MAC/C;MACA;;EAEF;;EACAI,UAAU;IACR,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EACAC,YAAY,CAACC,IAAW;IACtB,MAAMC,MAAM,GAAG,IAAIC,SAAS,EAAE;IAC9B,IAAIC,eAAe,GAAC,EAAE;IACtB,IAAGH,IAAI,IAAEI,SAAS,IAAIJ,IAAI,IAAE,IAAI,EAAC;MAC/B,IAAIK,aAAa,GAAGJ,MAAM,CAACK,eAAe,CAACN,IAAI,EAAE,WAAW,CAAC,CAACO,eAAe,CAACC,WAAW;MACzF,IAAGH,aAAa,IAAE,IAAI,EACrBF,eAAe,GAAGE,aAAa,CAACI,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;;IAGjE,OAAON,eAAe;EACxB;;AA1BWf,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDThC3B,2BAAK;MACGA,uBAAO;MAAAA,iBAAK;MAChBA,oEAkBM;MAERA,iBAAM;;;MApBEA,eAA0B;MAA1BA,iDAA0B","names":["i0","QuizResultComponent","constructor","quizService","router","ngOnInit","quizData","setQuizData","questions","selectedAnswers","createQuiz","navigate","sanitizeText","text","parser","DOMParser","sanitizedString","undefined","decodedString","parseFromString","documentElement","textContent","replace","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\Angular-certification-level-2\\quiz-maker\\src\\app\\quiz-result\\quiz-result.component.html","D:\\Angular-certification-level-2\\quiz-maker\\src\\app\\quiz-result\\quiz-result.component.ts"],"sourcesContent":["<div>\n    <h2>results</h2>\n    <div *ngIf=\"quizDetails.length>0\">\n      <div class=\"quiz-container\">\n        <div class=\"quiz-question\" *ngFor=\"let question of quizDetails; let questionIndex = index;\">\n          <h4>{{sanitizeText(question.question) }}</h4>\n          <div class=\"quiz-answer inner button\">\n            <button\n              *ngFor=\"let answer of question.answers; let answerIndex = index;\"\n              \n              \n            >\n              {{ sanitizeText(answer) }}\n            </button>\n          </div>\n        </div>\n        <div>{{resultStatement}} </div>\n        <div> <button type=\"submit\" (click)=\"createQuiz()\" >Create a new Quiz</button></div>\n      </div>\n      \n    </div>\n    \n  </div>\n  ","import { Component } from '@angular/core';\nimport { QuizMakerService } from '../services/quiz-maker.service';\nimport { Router } from '@angular/router';\nimport { QuizDetails } from '../models/quizDetails';\n@Component({\n  selector: 'app-quiz-result',\n  templateUrl: './quiz-result.component.html',\n  styleUrls: ['./quiz-result.component.css']\n})\nexport class QuizResultComponent implements OnInit{\n\n  resultStatement:string='';\n  constructor(private quizService:QuizMakerService,private router: Router){}\n\n  ngOnInit(): void {\n    const quizData = this.quizService.setQuizData();\n  if (quizData) {\n    const { questions, selectedAnswers } = quizData;\n    // Use the questions and selected answers to display in the QuizResultComponent\n    // Compare selected answers with correct answers to determine which ones are correct/incorrect\n  }\n  }\n  createQuiz():void{\n    this.router.navigate(['/']);\n  }\n  sanitizeText(text:string): string {\n    const parser = new DOMParser();\n    let sanitizedString='';\n    if(text!=undefined && text!=null){\n      let decodedString = parser.parseFromString(text, \"text/html\").documentElement.textContent;\n      if(decodedString!=null)\n       sanitizedString = decodedString.replace(/&#?[a-z0-9]+;/gi, \"\");\n    }\n    \n    return sanitizedString;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}