{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet QuizResultComponent = class QuizResultComponent {\n  constructor(quizService, router) {\n    this.quizService = quizService;\n    this.router = router;\n    this.quizDetails = [];\n    this.resultStatement = '';\n  }\n  ngOnInit() {\n    this.quizDetails = this.quizService.getQuizData();\n    console.log(this.quizDetails);\n    this.resultStatement = \"You scored \" + this.quizDetails[0].currect + \" out of 5\";\n  }\n  createQuiz() {\n    this.router.navigate(['/']);\n  }\n  sanitizeText(text) {\n    const parser = new DOMParser();\n    let sanitizedString = '';\n    if (text != undefined && text != null) {\n      let decodedString = parser.parseFromString(text, \"text/html\").documentElement.textContent;\n      if (decodedString != null) sanitizedString = decodedString.replace(/&#?[a-z0-9]+;/gi, \"\");\n    }\n    return sanitizedString;\n  }\n  isCorrect(answer, currectAns) {\n    if (answer === currectAns) return true;\n    return false;\n  }\n};\nQuizResultComponent = __decorate([Component({\n  selector: 'app-quiz-result',\n  templateUrl: './quiz-result.component.html',\n  styleUrls: ['./quiz-result.component.css']\n})], QuizResultComponent);\nexport { QuizResultComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAe,eAAe;AASzC,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAG9BC,YAAoBC,WAA4B,EAASC,MAAc;IAAnD,gBAAW,GAAXD,WAAW;IAA0B,WAAM,GAANC,MAAM;IAF/D,gBAAW,GAAe,EAAE;IAC5B,oBAAe,GAAQ,EAAE;EACgD;EAEzEC,QAAQ;IACP,IAAI,CAACC,WAAW,GAAE,IAAI,CAACH,WAAW,CAACI,WAAW,EAAE;IAChDC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAAC;IAC7B,IAAI,CAACI,eAAe,GAAC,aAAa,GAAC,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC,CAACK,OAAO,GAAC,WAAW;EAI3E;EACAC,UAAU;IACR,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EACAC,YAAY,CAACC,IAAW;IACtB,MAAMC,MAAM,GAAG,IAAIC,SAAS,EAAE;IAC9B,IAAIC,eAAe,GAAC,EAAE;IACtB,IAAGH,IAAI,IAAEI,SAAS,IAAIJ,IAAI,IAAE,IAAI,EAAC;MAC/B,IAAIK,aAAa,GAAGJ,MAAM,CAACK,eAAe,CAACN,IAAI,EAAE,WAAW,CAAC,CAACO,eAAe,CAACC,WAAW;MACzF,IAAGH,aAAa,IAAE,IAAI,EACrBF,eAAe,GAAGE,aAAa,CAACI,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;;IAGjE,OAAON,eAAe;EACxB;EACAO,SAAS,CAACC,MAAa,EAACC,UAAiB;IAE3C,IAAGD,MAAM,KAAGC,UAAU,EACtB,OAAO,IAAI;IACX,OAAO,KAAK;EACV;CACD;AAjCY1B,mBAAmB,eAL/BD,SAAS,CAAC;EACT4B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACW7B,mBAAmB,CAiC/B;SAjCYA,mBAAmB","names":["Component","QuizResultComponent","constructor","quizService","router","ngOnInit","quizDetails","getQuizData","console","log","resultStatement","currect","createQuiz","navigate","sanitizeText","text","parser","DOMParser","sanitizedString","undefined","decodedString","parseFromString","documentElement","textContent","replace","isCorrect","answer","currectAns","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Angular-certification-level-2\\quiz-maker\\src\\app\\quiz-result\\quiz-result.component.ts"],"sourcesContent":["import { Component ,OnInit} from '@angular/core';\nimport { QuizMakerService } from '../services/quiz-maker.service';\nimport { Router } from '@angular/router';\nimport { QuizDetails } from '../models/quizDetails';\n@Component({\n  selector: 'app-quiz-result',\n  templateUrl: './quiz-result.component.html',\n  styleUrls: ['./quiz-result.component.css']\n})\nexport class QuizResultComponent implements OnInit{\n  quizDetails:QuizDetails[]=[];\n  resultStatement:string='';\n  constructor(private quizService:QuizMakerService,private router: Router){}\n\n  ngOnInit(): void {\n   this.quizDetails= this.quizService.getQuizData();\n   console.log(this.quizDetails);\n   this.resultStatement=\"You scored \"+this.quizDetails[0].currect+\" out of 5\";\n\n\n   \n  }\n  createQuiz():void{\n    this.router.navigate(['/']);\n  }\n  sanitizeText(text:string): string {\n    const parser = new DOMParser();\n    let sanitizedString='';\n    if(text!=undefined && text!=null){\n      let decodedString = parser.parseFromString(text, \"text/html\").documentElement.textContent;\n      if(decodedString!=null)\n       sanitizedString = decodedString.replace(/&#?[a-z0-9]+;/gi, \"\");\n    }\n    \n    return sanitizedString;\n  }\n  isCorrect(answer:string,currectAns:string):boolean{\n\nif(answer===currectAns)\nreturn true;\nreturn false\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}